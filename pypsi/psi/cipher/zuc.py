from pysmx.ZUC import ZUC
import struct
from ..serialize import int_to_bytes,bytes_to_int

def encrypt(secret: bytes, plaintext: bytes):
    iv = [0x00] * 16
    zuc = ZUC(secret, iv)
    # 加密过程
    ciphertext = zuc.zuc_encrypt(plaintext)
    # 编码为字节流
    length = len(ciphertext)
    bytes_ciphertext = struct.pack(str(length)+"l", *ciphertext)
    res = int_to_bytes(length) + bytes_ciphertext
    
    return res


def decrypt(secret: bytes, ciphertext: bytes):
    iv = [0x00] * 16    # 随机生成初始向量
    zuc = ZUC(secret, iv)
    # 解码字节流
    length = bytes_to_int(ciphertext[:4])
    ciphertext = struct.unpack(str(length)+"l", ciphertext[4:])
    # 加密过程
    plaintext = zuc.zuc_encrypt(ciphertext)
    
    # 编码为字节流
    length = len(plaintext)
    bytes_ciphertext = struct.pack(str(length)+"l", *ciphertext)
    res = int_to_bytes(length) + bytes_ciphertext
    
    return bytes(plaintext)

# from numba import njit, uint32, none, uint8
# import numpy as np
# _ZUC_D = np.asarray([0x44D700, 0x26BC00, 0x626B00, 0x135E00, 0x578900, 0x35E200, 0x713500, 0x09AF00,
#                      0x4D7800, 0x2F1300, 0x6BC400, 0x1AF100, 0x5E2600, 0x3C4D00, 0x789A00, 0x47AC00], np.uint32)
# _ZUC_S0 = bytes([
#     0x3E, 0x72, 0x5B, 0x47, 0xCA, 0xE0, 0x00, 0x33, 0x04, 0xD1, 0x54, 0x98, 0x09, 0xB9, 0x6D, 0xCB,
#     0x7B, 0x1B, 0xF9, 0x32, 0xAF, 0x9D, 0x6A, 0xA5, 0xB8, 0x2D, 0xFC, 0x1D, 0x08, 0x53, 0x03, 0x90,
#     0x4D, 0x4E, 0x84, 0x99, 0xE4, 0xCE, 0xD9, 0x91, 0xDD, 0xB6, 0x85, 0x48, 0x8B, 0x29, 0x6E, 0xAC,
#     0xCD, 0xC1, 0xF8, 0x1E, 0x73, 0x43, 0x69, 0xC6, 0xB5, 0xBD, 0xFD, 0x39, 0x63, 0x20, 0xD4, 0x38,
#     0x76, 0x7D, 0xB2, 0xA7, 0xCF, 0xED, 0x57, 0xC5, 0xF3, 0x2C, 0xBB, 0x14, 0x21, 0x06, 0x55, 0x9B,
#     0xE3, 0xEF, 0x5E, 0x31, 0x4F, 0x7F, 0x5A, 0xA4, 0x0D, 0x82, 0x51, 0x49, 0x5F, 0xBA, 0x58, 0x1C,
#     0x4A, 0x16, 0xD5, 0x17, 0xA8, 0x92, 0x24, 0x1F, 0x8C, 0xFF, 0xD8, 0xAE, 0x2E, 0x01, 0xD3, 0xAD,
#     0x3B, 0x4B, 0xDA, 0x46, 0xEB, 0xC9, 0xDE, 0x9A, 0x8F, 0x87, 0xD7, 0x3A, 0x80, 0x6F, 0x2F, 0xC8,
#     0xB1, 0xB4, 0x37, 0xF7, 0x0A, 0x22, 0x13, 0x28, 0x7C, 0xCC, 0x3C, 0x89, 0xC7, 0xC3, 0x96, 0x56,
#     0x07, 0xBF, 0x7E, 0xF0, 0x0B, 0x2B, 0x97, 0x52, 0x35, 0x41, 0x79, 0x61, 0xA6, 0x4C, 0x10, 0xFE,
#     0xBC, 0x26, 0x95, 0x88, 0x8A, 0xB0, 0xA3, 0xFB, 0xC0, 0x18, 0x94, 0xF2, 0xE1, 0xE5, 0xE9, 0x5D,
#     0xD0, 0xDC, 0x11, 0x66, 0x64, 0x5C, 0xEC, 0x59, 0x42, 0x75, 0x12, 0xF5, 0x74, 0x9C, 0xAA, 0x23,
#     0x0E, 0x86, 0xAB, 0xBE, 0x2A, 0x02, 0xE7, 0x67, 0xE6, 0x44, 0xA2, 0x6C, 0xC2, 0x93, 0x9F, 0xF1,
#     0xF6, 0xFA, 0x36, 0xD2, 0x50, 0x68, 0x9E, 0x62, 0x71, 0x15, 0x3D, 0xD6, 0x40, 0xC4, 0xE2, 0x0F,
#     0x8E, 0x83, 0x77, 0x6B, 0x25, 0x05, 0x3F, 0x0C, 0x30, 0xEA, 0x70, 0xB7, 0xA1, 0xE8, 0xA9, 0x65,
#     0x8D, 0x27, 0x1A, 0xDB, 0x81, 0xB3, 0xA0, 0xF4, 0x45, 0x7A, 0x19, 0xDF, 0xEE, 0x78, 0x34, 0x60])
# _ZUC_S1 = bytes([
#     0x55, 0xC2, 0x63, 0x71, 0x3B, 0xC8, 0x47, 0x86, 0x9F, 0x3C, 0xDA, 0x5B, 0x29, 0xAA, 0xFD, 0x77,
#     0x8C, 0xC5, 0x94, 0x0C, 0xA6, 0x1A, 0x13, 0x00, 0xE3, 0xA8, 0x16, 0x72, 0x40, 0xF9, 0xF8, 0x42,
#     0x44, 0x26, 0x68, 0x96, 0x81, 0xD9, 0x45, 0x3E, 0x10, 0x76, 0xC6, 0xA7, 0x8B, 0x39, 0x43, 0xE1,
#     0x3A, 0xB5, 0x56, 0x2A, 0xC0, 0x6D, 0xB3, 0x05, 0x22, 0x66, 0xBF, 0xDC, 0x0B, 0xFA, 0x62, 0x48,
#     0xDD, 0x20, 0x11, 0x06, 0x36, 0xC9, 0xC1, 0xCF, 0xF6, 0x27, 0x52, 0xBB, 0x69, 0xF5, 0xD4, 0x87,
#     0x7F, 0x84, 0x4C, 0xD2, 0x9C, 0x57, 0xA4, 0xBC, 0x4F, 0x9A, 0xDF, 0xFE, 0xD6, 0x8D, 0x7A, 0xEB,
#     0x2B, 0x53, 0xD8, 0x5C, 0xA1, 0x14, 0x17, 0xFB, 0x23, 0xD5, 0x7D, 0x30, 0x67, 0x73, 0x08, 0x09,
#     0xEE, 0xB7, 0x70, 0x3F, 0x61, 0xB2, 0x19, 0x8E, 0x4E, 0xE5, 0x4B, 0x93, 0x8F, 0x5D, 0xDB, 0xA9,
#     0xAD, 0xF1, 0xAE, 0x2E, 0xCB, 0x0D, 0xFC, 0xF4, 0x2D, 0x46, 0x6E, 0x1D, 0x97, 0xE8, 0xD1, 0xE9,
#     0x4D, 0x37, 0xA5, 0x75, 0x5E, 0x83, 0x9E, 0xAB, 0x82, 0x9D, 0xB9, 0x1C, 0xE0, 0xCD, 0x49, 0x89,
#     0x01, 0xB6, 0xBD, 0x58, 0x24, 0xA2, 0x5F, 0x38, 0x78, 0x99, 0x15, 0x90, 0x50, 0xB8, 0x95, 0xE4,
#     0xD0, 0x91, 0xC7, 0xCE, 0xED, 0x0F, 0xB4, 0x6F, 0xA0, 0xCC, 0xF0, 0x02, 0x4A, 0x79, 0xC3, 0xDE,
#     0xA3, 0xEF, 0xEA, 0x51, 0xE6, 0x6B, 0x18, 0xEC, 0x1B, 0x2C, 0x80, 0xF7, 0x74, 0xE7, 0xFF, 0x21,
#     0x5A, 0x6A, 0x54, 0x1E, 0x41, 0x31, 0x92, 0x35, 0xC4, 0x33, 0x07, 0x0A, 0xBA, 0x7E, 0x0E, 0x34,
#     0x88, 0xB1, 0x98, 0x7C, 0xF3, 0x3D, 0x60, 0x6C, 0x7B, 0xCA, 0xD3, 0x1F, 0x32, 0x65, 0x04, 0x28,
#     0x64, 0xBE, 0x85, 0x9B, 0x2F, 0x59, 0x8A, 0xD7, 0xB0, 0x25, 0xAC, 0xAF, 0x12, 0x03, 0xE2, 0xF2])
# _ZUC_S = []
# for byte1 in _ZUC_S0:  # 构造两字节的S盒变换表
#     byte1 <<= 8
#     _ZUC_S.extend(byte1 | byte2 for byte2 in _ZUC_S1)
# _ZUC_S = np.asarray(_ZUC_S, np.uint32)


# @njit(uint32(uint32[::1], uint32[::1]), nogil=True, cache=True)
# def lfsr_next(lfsr, r):
#     W1, W2 = r[0] + (lfsr[11] << 16 | lfsr[9] >> 15) & 0xFFFFFFFF, r[1] ^ ((lfsr[7] & 0xFFFF) << 16 | lfsr[5] >> 15)
#     x, y = (W1 & 0xFFFF) << 16 | W2 >> 16, (W2 & 0xFFFF) << 16 | W1 >> 16  # L线性变换
#     u = (x ^ (x << 2 | x >> 30) ^ (x << 10 | x >> 22) ^ (x << 18 | x >> 14) ^ (x << 24 | x >> 8)) & 0xFFFFFFFF
#     v = (y ^ (y << 8 | y >> 24) ^ (y << 14 | y >> 18) ^ (y << 22 | y >> 10) ^ (y << 30 | y >> 2)) & 0xFFFFFFFF
#     r[:] = _ZUC_S[u >> 16] << 16 | _ZUC_S[u & 0xFFFF], _ZUC_S[v >> 16] << 16 | _ZUC_S[v & 0xFFFF]  # S盒变换
#     v_0, v_4, v_10, v_13, v_15 = lfsr[0], lfsr[4], lfsr[10], lfsr[13], lfsr[15]
#     c = v_0 + ((v_0 << 8 | v_0 >> 23) & 0x7FFFFFFF)
#     c = (c & 0x7FFFFFFF) + (c >> 31) + ((v_4 << 20 | v_4 >> 11) & 0x7FFFFFFF)
#     c = (c & 0x7FFFFFFF) + (c >> 31) + ((v_10 << 21 | v_10 >> 10) & 0x7FFFFFFF)
#     c = (c & 0x7FFFFFFF) + (c >> 31) + ((v_13 << 17 | v_13 >> 14) & 0x7FFFFFFF)
#     c = (c & 0x7FFFFFFF) + (c >> 31) + ((v_15 << 15 | v_15 >> 16) & 0x7FFFFFFF)
#     return (c & 0x7FFFFFFF) + (c >> 31)


# @njit(none(uint32[::1], uint32[::1], uint8[::1], uint8[::1]), nogil=True, cache=True)
# def init(lfsr, r, key, iv):
#     for i in range(16):
#         lfsr[i] = _ZUC_D[i] | key[i] << 23 | iv[i]
#     for i in range(32):
#         c = (((lfsr[15] << 1 & 0xFFFF0000 | lfsr[14] & 0xFFFF) ^ r[0]) + r[1] >> 1 & 0x7FFFFFFF) + lfsr_next(lfsr, r)
#         lfsr[:15], lfsr[15] = lfsr[1:], (c & 0x7FFFFFFF) + (c >> 31)


# @njit(uint32[::1](uint32[::1], uint32[::1], uint8[::1]), nogil=True, cache=True)
# def encrypt(lfsr, r, data):
#     res = np.empty_like(data, np.uint32)
#     for i in range(len(data)):
#         lfsr[:15], lfsr[15] = lfsr[1:], lfsr_next(lfsr, r)
#         res[i] = data[i] ^ ((lfsr[15] << 1 & 0xFFFF0000 | lfsr[14] & 0xFFFF) ^ r[0]) + r[1] ^ ((lfsr[2] & 0xFFFF) << 16 | lfsr[0] >> 15)
#     lfsr[:15], lfsr[15] = lfsr[1:], lfsr_next(lfsr, r)
#     return res


# @njit(uint32[::1](uint32[::1], uint32[::1], uint32[::1]), nogil=True, cache=True)
# def decrypt(lfsr, r, data):
#     res = np.empty_like(data, np.uint32)
#     for i in range(len(data)):
#         lfsr[:15], lfsr[15] = lfsr[1:], lfsr_next(lfsr, r)
#         res[i] = data[i] ^ ((lfsr[15] << 1 & 0xFFFF0000 | lfsr[14] & 0xFFFF) ^ r[0]) + r[1] ^ ((lfsr[2] & 0xFFFF) << 16 | lfsr[0] >> 15)
#     lfsr[:15], lfsr[15] = lfsr[1:], lfsr_next(lfsr, r)
#     return res


# class ZUC:
#     def __init__(self, key, iv):
#         self.lfsr, self.r = np.empty((16,), np.uint32), np.zeros((2,), np.uint32)
#         init(self.lfsr, self.r, np.frombuffer(key, np.uint8).copy(), np.frombuffer(iv, np.uint8).copy())

#     def enc(self, data):
#         return encrypt(self.lfsr, self.r, np.frombuffer(data, np.uint8).copy())

#     def dec(self, data):
#         return decrypt(self.lfsr, self.r, np.frombuffer(data, np.uint32).copy() if type(data) is bytes else np.asarray(data, np.uint32))


